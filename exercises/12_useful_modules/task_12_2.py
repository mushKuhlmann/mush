# -*- coding: utf-8 -*-
'''
Задание 12.2


Функция ping_ip_addresses из задания 12.1 принимает только список адресов,
но было бы удобно иметь возможность указывать адреса с помощью диапазона, например, 192.168.100.1-10.

В этом задании необходимо создать функцию convert_ranges_to_ip_list,
которая конвертирует список IP-адресов в разных форматах в список, где каждый IP-адрес указан отдельно.

Функция ожидает как аргумент список IP-адресов и/или диапазонов IP-адресов.

Элементы списка могут быть в формате:
* 10.1.1.1
* 10.1.1.1-10.1.1.10
* 10.1.1.1-10

Если адрес указан в виде диапазона, надо развернуть диапазон в отдельные адреса, включая последний адрес диапазона.
Для упрощения задачи, можно считать, что в диапазоне всегда меняется только последний октет адреса.

Функция возвращает список IP-адресов.


Например, если передать функции convert_ranges_to_ip_list такой список:
['8.8.4.4', '1.1.1.1-3', '172.21.41.128-172.21.41.132']

Функция должна вернуть такой список:
['8.8.4.4', '1.1.1.1', '1.1.1.2', '1.1.1.3', '172.21.41.128',
 '172.21.41.129', '172.21.41.130', '172.21.41.131', '172.21.41.132']

'''
def convert_ranges_to_ip_list(ip_list):
	result = []
	for ip in ip_list:
		if '-' not in ip:
			result.append(ip)
		else:
			ip_new = ip.split('-')
			ip_new_left = ip_new[0].split('.')
			ip_new_right = ip_new[1].split('.')
			i = int(ip_new_left[-1])
			j = int(ip_new_right[-1])
			ip_address = ip_new_left[0]+'.'+ip_new_left[1]+'.'+ip_new_left[2]+'.'
			for num in range(i, (j + 1)):
				element = str(ip_address + '{}'.format(num))
				result.append(element)
	return result
print(convert_ranges_to_ip_list(['8.8.4.4', '1.1.1.1-1.1.1.8', '172.21.41.128-135']))
